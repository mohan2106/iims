{"ast":null,"code":"var _jsxFileName = \"/home/bhasker/Programming/Web Development/IIMS/client/src/components/AskQuery/AskQuery.js\";\nimport React, { Component, useState } from \"react\";\nimport classes from \"./AskQuery.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ValidationMessage(props) {\n  if (!props.valid) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.error_msg,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: props.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this);\n  }\n\n  return null;\n}\n\n_c = ValidationMessage;\n\nclass AskQuery extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      kidlogo: process.env.PUBLIC_URL + \"/images/query.svg\",\n      username: \"\",\n      usernameValid: false,\n      category: \"\",\n      categories: [\"Category 1\", \"Category 2\", \"Category 3\", \"Category 4\", \"Category 5\", \"Category 6\"],\n      categoryValid: true,\n      query: \"\",\n      queryValid: false,\n      formValid: false,\n      submitted: false,\n      errorMessage: {\n        username: \"\",\n        category: \"\",\n        query: \"\",\n        form: \"\"\n      }\n    };\n  }\n\n  async validateForm() {\n    if (this.state.usernameValid === true && this.state.categoryValid === true && this.state.queryValid === true) {\n      await this.setState({\n        formValid: true\n      });\n    } else {\n      let errMsg = { ...this.state.errorMessage\n      };\n      errMsg.form = \"Form is invalid\";\n      await this.setState({\n        formValid: false,\n        errorMessage: errMsg\n      });\n    }\n  }\n\n  async updateUsername(data) {\n    let errorMsg = { ...this.state.errorMessage\n    };\n\n    if (data.length > 0) {\n      await this.setState({\n        username: data,\n        usernameValid: true\n      });\n    } else {\n      errorMsg.username = \"Name is required!\";\n      await this.setState({\n        username: data,\n        usernameValid: false,\n        errorMessage: errorMsg\n      });\n    }\n\n    await this.validateForm();\n  }\n\n  getCategoryOptions() {\n    let options = [];\n    this.state.categories.forEach(category => {\n      options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n        value: category,\n        children: category\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 26\n      }, this));\n    });\n    return options;\n  }\n\n  async updateCategory(data) {\n    let errorMsg = { ...this.state.errorMessage\n    };\n    console.log(data);\n\n    if (data.length > 0 && this.state.categories.includes(data) === true) {\n      await this.setState({\n        category: data,\n        categoryValid: true\n      });\n    } else {\n      errorMsg.category = \"Category is required!\";\n      await this.setState({\n        category: data,\n        categoryValid: false,\n        errorMessage: errorMsg\n      });\n    }\n\n    await this.validateForm();\n  }\n\n  async updateQuery(data) {\n    let errorMsg = { ...this.state.errorMessage\n    };\n\n    if (data.length > 0) {\n      await this.setState({\n        query: data,\n        queryValid: true\n      });\n    } else {\n      errorMsg.query = \"Query is required!\";\n      await this.setState({\n        query: data,\n        queryValid: false,\n        errorMessage: errorMsg\n      });\n    }\n\n    this.validateForm();\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n    await this.validateForm();\n\n    if (this.state.formValid === true && this.state.submitted === false) {\n      this.setState({\n        submitted: true\n      });\n      const url = process.env.REACT_APP_API_ENDPOINT + \"query/post\";\n      fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: this.state.username,\n          category: this.state.category,\n          query: this.state.query\n        })\n      }).then(async () => {\n        await this.setState({\n          username: \"\",\n          usernameValid: false,\n          category: \"\",\n          categoryValid: true,\n          query: \"\",\n          queryValid: false,\n          formValid: false,\n          submitted: false,\n          errorMessage: {\n            username: \"\",\n            category: \"\",\n            query: \"\",\n            form: \"\"\n          }\n        });\n      });\n    } else {\n      let errMsg = { ...this.state.errorMessage\n      };\n      errMsg.form = \"Form is invalid\";\n      await this.setState({\n        errorMessage: errMsg\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.main,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.container,\n        style: {\n          backgroundImage: `url(${process.env.PUBLIC_URL + \"/images/CurveBackground.svg\"})`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.item1,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Ask Query\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 187,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Do you have any question regarding any Events or anything to ask from the Event Manager?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: this.state.kidlogo,\n            alt: \"creative\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.item2,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            action: \"#\",\n            id: \"js-form\",\n            className: classes.form,\n            onSubmit: this.handleSubmit.bind(this),\n            children: [/*#__PURE__*/_jsxDEV(ValidationMessage, {\n              valid: this.state.formValid,\n              message: this.state.errorMessage.form\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.form_group,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: classes.label,\n                htmlFor: \"username\",\n                children: \"Username\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n                valid: this.state.usernameValid,\n                message: this.state.errorMessage.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 213,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"username\",\n                name: \"username\",\n                className: classes.form_field,\n                value: this.state.username,\n                onChange: e => this.updateUsername(e.target.value),\n                placeholder: \"Username\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 217,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.form_group,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: classes.label,\n                htmlFor: \"category\",\n                children: \"Query Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 231,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n                valid: this.state.categoryValid,\n                message: this.state.errorMessage.category\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n                name: \"category\",\n                id: \"category\",\n                className: classes.form_field,\n                value: this.state.category,\n                onChange: e => this.updateCategory(e.target.innerHTML),\n                children: this.getCategoryOptions()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 230,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.form_group,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: classes.label,\n                htmlFor: \"query\",\n                children: \"Query\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n                valid: this.state.queryValid,\n                message: this.state.errorMessage.query\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                type: \"text\",\n                id: \"query\",\n                name: \"query\",\n                className: classes.form_text_field,\n                value: this.state.query,\n                onChange: e => this.updateQuery(e.target.value),\n                rows: \"5\",\n                column: \"10\",\n                placeholder: \"Enter your query here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-controls\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: classes.btn,\n                type: \"submit\",\n                disabled: !this.state.formValid,\n                children: \"Ask Query\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 293,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 195,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default AskQuery;\n\nvar _c;\n\n$RefreshReg$(_c, \"ValidationMessage\");","map":{"version":3,"sources":["/home/bhasker/Programming/Web Development/IIMS/client/src/components/AskQuery/AskQuery.js"],"names":["React","Component","useState","classes","ValidationMessage","props","valid","error_msg","message","AskQuery","constructor","state","kidlogo","process","env","PUBLIC_URL","username","usernameValid","category","categories","categoryValid","query","queryValid","formValid","submitted","errorMessage","form","validateForm","setState","errMsg","updateUsername","data","errorMsg","length","getCategoryOptions","options","forEach","push","updateCategory","console","log","includes","updateQuery","handleSubmit","e","preventDefault","url","REACT_APP_API_ENDPOINT","fetch","method","headers","body","JSON","stringify","then","render","main","container","backgroundImage","item1","item2","bind","form_group","label","form_field","target","value","innerHTML","form_text_field","btn"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport classes from \"./AskQuery.module.css\";\n\nfunction ValidationMessage(props) {\n    if (!props.valid) {\n        return (\n            <div className={classes.error_msg}>\n                <p>{props.message}</p>\n            </div>\n        );\n    }\n    return null;\n}\n\nclass AskQuery extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kidlogo: process.env.PUBLIC_URL + \"/images/query.svg\",\n            username: \"\",\n            usernameValid: false,\n            category: \"\",\n            categories: [\n                \"Category 1\",\n                \"Category 2\",\n                \"Category 3\",\n                \"Category 4\",\n                \"Category 5\",\n                \"Category 6\",\n            ],\n            categoryValid: true,\n            query: \"\",\n            queryValid: false,\n            formValid: false,\n            submitted: false,\n            errorMessage: {\n                username: \"\",\n                category: \"\",\n                query: \"\",\n                form: \"\",\n            },\n        };\n    }\n\n    async validateForm() {\n        if (\n            this.state.usernameValid === true &&\n            this.state.categoryValid === true &&\n            this.state.queryValid === true\n        ) {\n            await this.setState({\n                formValid: true,\n            });\n        } else {\n            let errMsg = { ...this.state.errorMessage };\n            errMsg.form = \"Form is invalid\";\n            await this.setState({\n                formValid: false,\n                errorMessage: errMsg,\n            });\n        }\n    }\n    async updateUsername(data) {\n        let errorMsg = { ...this.state.errorMessage };\n        if (data.length > 0) {\n            await this.setState({\n                username: data,\n                usernameValid: true,\n            });\n        } else {\n            errorMsg.username = \"Name is required!\";\n            await this.setState({\n                username: data,\n                usernameValid: false,\n                errorMessage: errorMsg,\n            });\n        }\n        await this.validateForm();\n    }\n\n    getCategoryOptions() {\n        let options = [];\n        this.state.categories.forEach((category) => {\n            options.push(<option value={category}>{category}</option>);\n        });\n        return options;\n    }\n\n    async updateCategory(data) {\n        let errorMsg = { ...this.state.errorMessage };\n        console.log(data);\n        if (data.length > 0 && this.state.categories.includes(data) === true) {\n            await this.setState({\n                category: data,\n                categoryValid: true,\n            });\n        } else {\n            errorMsg.category = \"Category is required!\";\n            await this.setState({\n                category: data,\n                categoryValid: false,\n                errorMessage: errorMsg,\n            });\n        }\n        await this.validateForm();\n    }\n\n    async updateQuery(data) {\n        let errorMsg = { ...this.state.errorMessage };\n        if (data.length > 0) {\n            await this.setState({\n                query: data,\n                queryValid: true,\n            });\n        } else {\n            errorMsg.query = \"Query is required!\";\n            await this.setState({\n                query: data,\n                queryValid: false,\n                errorMessage: errorMsg,\n            });\n        }\n        this.validateForm();\n    }\n\n    async handleSubmit(e) {\n        e.preventDefault();\n        await this.validateForm();\n        if (this.state.formValid === true && this.state.submitted === false) {\n            this.setState({\n                submitted: true,\n            });\n\n            const url = process.env.REACT_APP_API_ENDPOINT + \"query/post\";\n\n            fetch(url, {\n                method: \"POST\",\n                headers: {\n                    \"Content-type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    username: this.state.username,\n                    category: this.state.category,\n                    query: this.state.query,\n                }),\n            }).then(async () => {\n                await this.setState({\n                    username: \"\",\n                    usernameValid: false,\n                    category: \"\",\n                    categoryValid: true,\n                    query: \"\",\n                    queryValid: false,\n                    formValid: false,\n                    submitted: false,\n                    errorMessage: {\n                        username: \"\",\n                        category: \"\",\n                        query: \"\",\n                        form: \"\",\n                    },\n                });\n            });\n        } else {\n            let errMsg = { ...this.state.errorMessage };\n            errMsg.form = \"Form is invalid\";\n            await this.setState({\n                errorMessage: errMsg,\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className={classes.main}>\n                <div\n                    className={classes.container}\n                    style={{\n                        backgroundImage: `url(${\n                            process.env.PUBLIC_URL +\n                            \"/images/CurveBackground.svg\"\n                        })`,\n                    }}\n                >\n                    <div className={classes.item1}>\n                        <h2>Ask Query</h2>\n                        <p>\n                            Do you have any question regarding any Events or\n                            anything to ask from the Event Manager?\n                        </p>\n                        <img src={this.state.kidlogo} alt=\"creative\"></img>\n                    </div>\n                    <div className={classes.item2}>\n                        <form\n                            action=\"#\"\n                            id=\"js-form\"\n                            className={classes.form}\n                            onSubmit={this.handleSubmit.bind(this)}\n                        >\n                            <ValidationMessage\n                                valid={this.state.formValid}\n                                message={this.state.errorMessage.form}\n                            />\n                            {/* Username */}\n                            <div className={classes.form_group}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"username\"\n                                >\n                                    Username\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.usernameValid}\n                                    message={this.state.errorMessage.username}\n                                />\n                                <input\n                                    type=\"text\"\n                                    id=\"username\"\n                                    name=\"username\"\n                                    className={classes.form_field}\n                                    value={this.state.username}\n                                    onChange={(e) =>\n                                        this.updateUsername(e.target.value)\n                                    }\n                                    placeholder=\"Username\"\n                                />\n                            </div>\n                            {/* Category */}\n                            <div className={classes.form_group}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"category\"\n                                >\n                                    Query Category\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.categoryValid}\n                                    message={this.state.errorMessage.category}\n                                />\n                                <select\n                                    name=\"category\"\n                                    id=\"category\"\n                                    className={classes.form_field}\n                                    value={this.state.category}\n                                    onChange={(e) =>\n                                        this.updateCategory(\n                                            e.target.innerHTML\n                                        )\n                                    }\n                                >\n                                    {this.getCategoryOptions()}\n                                </select>\n                                {/* <input\n                                    type=\"text\"\n                                    id=\"category\"\n                                    name=\"category\"\n                                    className={classes.form_field}\n                                    value={this.state.category}\n                                    onChange={(e) =>\n                                        this.updateCategory(e.target.value)\n                                    }\n                                    placeholder=\"Query Category\"\n                                /> */}\n                            </div>\n                            {/* Query */}\n                            <div className={classes.form_group}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"query\"\n                                >\n                                    Query\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.queryValid}\n                                    message={this.state.errorMessage.query}\n                                />\n                                <textarea\n                                    type=\"text\"\n                                    id=\"query\"\n                                    name=\"query\"\n                                    className={classes.form_text_field}\n                                    value={this.state.query}\n                                    onChange={(e) =>\n                                        this.updateQuery(e.target.value)\n                                    }\n                                    rows=\"5\"\n                                    column=\"10\"\n                                    placeholder=\"Enter your query here\"\n                                />\n                            </div>\n                            {/* Submit */}\n                            <div className=\"form-controls\">\n                                <button\n                                    className={classes.btn}\n                                    type=\"submit\"\n                                    disabled={!this.state.formValid}\n                                >\n                                    Ask Query\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default AskQuery;\n"]},"metadata":{},"sourceType":"module"}