{"ast":null,"code":"var _jsxFileName = \"/home/mohan/dev/react/iims/client/src/components/AddEvent/AddEvent.js\";\nimport React, { Component } from 'react';\nimport classes from './AddEvent.module.css';\nimport DateTimePicker from 'react-datetime-picker';\nimport { Multiselect } from 'multiselect-react-dropdown';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AddEvent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      kidlogo: process.env.PUBLIC_URL + \"/images/query.svg\",\n      username: \"\",\n      usernameValid: false,\n      venue: \"\",\n      venueValid: false,\n      dateTime: new Date(),\n      desc: \"\",\n      descValid: false,\n      categories: [\"Category 1\", \"Category 2\", \"Category 3\", \"Category 4\", \"Category 5\", \"Category 6\"],\n      category: \"Category 1\",\n      categoryValid: true,\n      collegeOptions: [{\n        name: 'IIT Guwahati',\n        id: 1\n      }, {\n        name: 'IIT Bombay',\n        id: 2\n      }, {\n        name: 'IIT '\n      }],\n      formValid: false,\n      submitted: false,\n      errorMessage: {\n        username: \"\",\n        category: \"\",\n        query: \"\",\n        form: \"\",\n        venue: \"\",\n        date: \"\",\n        desc: \"\"\n      }\n    };\n  }\n\n  async validateForm() {\n    if (this.state.usernameValid === true && this.state.categoryValid === true && this.state.queryValid === true) {\n      await this.setState({\n        formValid: true\n      });\n    } else {\n      let errMsg = { ...this.state.errorMessage\n      };\n      errMsg.form = \"Form is invalid\";\n      await this.setState({\n        formValid: false,\n        errorMessage: errMsg\n      });\n    }\n  }\n\n  async updateUsername(data) {\n    let errorMsg = { ...this.state.errorMessage\n    };\n\n    if (data.length > 0) {\n      await this.setState({\n        username: data,\n        usernameValid: true\n      });\n    } else {\n      errorMsg.username = \"Name is required!\";\n      await this.setState({\n        username: data,\n        usernameValid: false,\n        errorMessage: errorMsg\n      });\n    }\n\n    await this.validateForm();\n  }\n\n  async updateVenue(data) {\n    let errorMsg = { ...this.state.errorMessage\n    };\n\n    if (data.length > 0) {\n      await this.setState({\n        venue: data,\n        venueValid: true\n      });\n    } else {\n      errorMsg.venue = \"Venue is required!\";\n      await this.setState({\n        venue: data,\n        venueValid: false,\n        errorMessage: errorMsg\n      });\n    }\n\n    await this.validateForm();\n  }\n\n  getCategoryOptions() {\n    let options = [];\n    this.state.categories.forEach(category => {\n      options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n        value: category,\n        children: category\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 26\n      }, this));\n    });\n    return options;\n  }\n\n  async updateCategory(data) {\n    let errorMsg = { ...this.state.errorMessage\n    };\n    console.log(data);\n\n    if (data.length > 0 && this.state.categories.includes(data) === true) {\n      await this.setState({\n        category: data,\n        categoryValid: true\n      });\n    } else {\n      errorMsg.category = \"Category is required!\";\n      await this.setState({\n        category: data,\n        categoryValid: false,\n        errorMessage: errorMsg\n      });\n    }\n\n    await this.validateForm();\n  }\n\n  async updateDesc(data) {\n    let errorMsg = { ...this.state.errorMessage\n    };\n\n    if (data.length > 0) {\n      await this.setState({\n        desc: data,\n        descValid: true\n      });\n    } else {\n      errorMsg.desc = \"Desc is required!\";\n      await this.setState({\n        desc: data,\n        descValid: false,\n        errorMessage: errorMsg\n      });\n    }\n\n    this.validateForm();\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n    await this.validateForm();\n\n    if (this.state.formValid === true && this.state.submitted === false) {\n      this.setState({\n        submitted: true\n      });\n      const url = process.env.REACT_APP_API_ENDPOINT + \"query/\";\n      fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: this.state.username,\n          category: this.state.category,\n          query: this.state.query\n        })\n      }).then(async () => {\n        await this.setState({\n          username: \"\",\n          usernameValid: false,\n          category: \"\",\n          categoryValid: true,\n          query: \"\",\n          queryValid: false,\n          formValid: false,\n          submitted: false,\n          errorMessage: {\n            username: \"\",\n            category: \"\",\n            query: \"\",\n            form: \"\"\n          }\n        });\n      });\n    } else {\n      let errMsg = { ...this.state.errorMessage\n      };\n      errMsg.form = \"Form is invalid\";\n      await this.setState({\n        errorMessage: errMsg\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.container,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: classes.title,\n        children: \"Add Events\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        action: \"#\",\n        id: \"js-form\",\n        className: classes.form,\n        onSubmit: this.handleSubmit.bind(this),\n        children: [/*#__PURE__*/_jsxDEV(ValidationMessage, {\n          valid: this.state.formValid,\n          message: this.state.errorMessage.form\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.form_group,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: classes.label,\n            htmlFor: \"Name\",\n            children: \"Name Of Event\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n            valid: this.state.usernameValid,\n            message: this.state.errorMessage.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"username\",\n            name: \"username\",\n            className: classes.form_field,\n            value: this.state.username,\n            onChange: e => this.updateUsername(e.target.value),\n            placeholder: \"Input the Event Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.form_group,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: classes.label,\n            htmlFor: \"Venue\",\n            children: \"Venue Of Event\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 232,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n            valid: this.state.venueValid,\n            message: this.state.errorMessage.venue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 238,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"venue\",\n            name: \"venue\",\n            className: classes.form_field,\n            value: this.state.username,\n            onChange: e => this.updateUsername(e.target.value),\n            placeholder: \"Input the Venue of Event\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.form_group,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: classes.label,\n            htmlFor: \"Date and Time\",\n            children: \"Date and Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n            valid: this.state.dateTimeValid,\n            message: this.state.errorMessage.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(DateTimePicker, {\n            onChange: e => this.setState({\n              dateTime: e\n            }),\n            value: this.state.dateTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.form_group,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: classes.label,\n            htmlFor: \"Venue\",\n            children: \"Event Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n            valid: this.state.descValid,\n            message: this.state.errorMessage.desc\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"desc\",\n            name: \"desc\",\n            className: classes.form_field,\n            value: this.state.desc,\n            onChange: e => this.updateDesc(e.target.value),\n            placeholder: \"Input the Venue of Event\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 282,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.form_group,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: classes.label,\n            htmlFor: \"category\",\n            children: \"Query Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n            valid: this.state.categoryValid,\n            message: this.state.errorMessage.category\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"category\",\n            id: \"category\",\n            className: classes.form_field,\n            value: this.state.category,\n            onChange: e => this.updateCategory(e.target.value),\n            children: this.getCategoryOptions()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-controls\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: classes.btn,\n            type: \"submit\",\n            disabled: !this.state.formValid,\n            children: \"Ask Query\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 332,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 331,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction ValidationMessage(props) {\n  if (!props.valid) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.error_msg,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: props.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 13\n    }, this);\n  }\n\n  return null;\n}\n\n_c = ValidationMessage;\nexport default AddEvent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ValidationMessage\");","map":{"version":3,"sources":["/home/mohan/dev/react/iims/client/src/components/AddEvent/AddEvent.js"],"names":["React","Component","classes","DateTimePicker","Multiselect","AddEvent","constructor","props","state","kidlogo","process","env","PUBLIC_URL","username","usernameValid","venue","venueValid","dateTime","Date","desc","descValid","categories","category","categoryValid","collegeOptions","name","id","formValid","submitted","errorMessage","query","form","date","validateForm","queryValid","setState","errMsg","updateUsername","data","errorMsg","length","updateVenue","getCategoryOptions","options","forEach","push","updateCategory","console","log","includes","updateDesc","handleSubmit","e","preventDefault","url","REACT_APP_API_ENDPOINT","fetch","method","headers","body","JSON","stringify","then","render","container","title","bind","form_group","label","form_field","target","value","dateTimeValid","btn","ValidationMessage","valid","error_msg","message"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport classes from './AddEvent.module.css';\nimport DateTimePicker from 'react-datetime-picker';\nimport { Multiselect } from 'multiselect-react-dropdown';\n\n\n\nclass AddEvent extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kidlogo: process.env.PUBLIC_URL + \"/images/query.svg\",\n            username: \"\",\n            usernameValid: false,\n            venue : \"\",\n            venueValid:false,\n            dateTime: new Date(),\n            desc : \"\",\n            descValid : false,\n            categories: [\n                \"Category 1\",\n                \"Category 2\",\n                \"Category 3\",\n                \"Category 4\",\n                \"Category 5\",\n                \"Category 6\",\n            ],\n            category: \"Category 1\",\n            categoryValid: true,\n            collegeOptions: [\n                {name: 'IIT Guwahati', id: 1},\n                {name: 'IIT Bombay', id: 2},\n                {name: 'IIT '}\n            ],\n            formValid: false,\n            submitted: false,\n            errorMessage: {\n                username: \"\",\n                category: \"\",\n                query: \"\",\n                form: \"\",\n                venue: \"\",\n                date: \"\",\n                desc : \"\"\n            },\n        };\n    }\n    async validateForm() {\n        if (\n            this.state.usernameValid === true &&\n            this.state.categoryValid === true &&\n            this.state.queryValid === true\n        ) {\n            await this.setState({\n                formValid: true,\n            });\n        } else {\n            let errMsg = { ...this.state.errorMessage };\n            errMsg.form = \"Form is invalid\";\n            await this.setState({\n                formValid: false,\n                errorMessage: errMsg,\n            });\n        }\n    }\n    async updateUsername(data) {\n        let errorMsg = { ...this.state.errorMessage };\n        if (data.length > 0) {\n            await this.setState({\n                username: data,\n                usernameValid: true,\n            });\n        } else {\n            errorMsg.username = \"Name is required!\";\n            await this.setState({\n                username: data,\n                usernameValid: false,\n                errorMessage: errorMsg,\n            });\n        }\n        await this.validateForm();\n    }\n    async updateVenue(data) {\n        let errorMsg = { ...this.state.errorMessage };\n        if (data.length > 0) {\n            await this.setState({\n                venue: data,\n                venueValid: true,\n            });\n        } else {\n            errorMsg.venue = \"Venue is required!\";\n            await this.setState({\n                venue: data,\n                venueValid: false,\n                errorMessage: errorMsg,\n            });\n        }\n        await this.validateForm();\n    }\n\n    getCategoryOptions() {\n        let options = [];\n        this.state.categories.forEach((category) => {\n            options.push(<option value={category}>{category}</option>);\n        });\n        return options;\n    }\n\n    async updateCategory(data) {\n        let errorMsg = { ...this.state.errorMessage };\n        console.log(data);\n        if (data.length > 0 && this.state.categories.includes(data) === true) {\n            await this.setState({\n                category: data,\n                categoryValid: true,\n            });\n        } else {\n            errorMsg.category = \"Category is required!\";\n            await this.setState({\n                category: data,\n                categoryValid: false,\n                errorMessage: errorMsg,\n            });\n        }\n        await this.validateForm();\n    }\n\n    async updateDesc(data) {\n        let errorMsg = { ...this.state.errorMessage };\n        if (data.length > 0) {\n            await this.setState({\n                desc: data,\n                descValid: true,\n            });\n        } else {\n            errorMsg.desc = \"Desc is required!\";\n            await this.setState({\n                desc: data,\n                descValid: false,\n                errorMessage: errorMsg,\n            });\n        }\n        this.validateForm();\n    }\n\n    async handleSubmit(e) {\n        e.preventDefault();\n        await this.validateForm();\n        if (this.state.formValid === true && this.state.submitted === false) {\n            this.setState({\n                submitted: true,\n            });\n\n            const url = process.env.REACT_APP_API_ENDPOINT + \"query/\";\n\n            fetch(url, {\n                method: \"POST\",\n                headers: {\n                    \"Content-type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    username: this.state.username,\n                    category: this.state.category,\n                    query: this.state.query,\n                }),\n            }).then(async () => {\n                await this.setState({\n                    username: \"\",\n                    usernameValid: false,\n                    category: \"\",\n                    categoryValid: true,\n                    query: \"\",\n                    queryValid: false,\n                    formValid: false,\n                    submitted: false,\n                    errorMessage: {\n                        username: \"\",\n                        category: \"\",\n                        query: \"\",\n                        form: \"\",\n                    },\n                });\n            });\n        } else {\n            let errMsg = { ...this.state.errorMessage };\n            errMsg.form = \"Form is invalid\";\n            await this.setState({\n                errorMessage: errMsg,\n            });\n        }\n    }\n    render(){\n        return (\n            <div className={classes.container}>\n                <h1 className={classes.title}>Add Events</h1>\n                <form\n                            action=\"#\"\n                            id=\"js-form\"\n                            className={classes.form}\n                            onSubmit={this.handleSubmit.bind(this)}\n                        >\n                            <ValidationMessage\n                                valid={this.state.formValid}\n                                message={this.state.errorMessage.form}\n                            />\n                            {/* name */}\n                            <div className={classes.form_group}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"Name\"\n                                >\n                                    Name Of Event\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.usernameValid}\n                                    message={this.state.errorMessage.username}\n                                />\n                                <input\n                                    type=\"text\"\n                                    id=\"username\"\n                                    name=\"username\"\n                                    className={classes.form_field}\n                                    value={this.state.username}\n                                    onChange={(e) =>\n                                        this.updateUsername(e.target.value)\n                                    }\n                                    placeholder=\"Input the Event Name\"\n                                />\n                            </div>\n                            <div className={classes.form_group}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"Venue\"\n                                >\n                                    Venue Of Event\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.venueValid}\n                                    message={this.state.errorMessage.venue}\n                                />\n                                <input\n                                    type=\"text\"\n                                    id=\"venue\"\n                                    name=\"venue\"\n                                    className={classes.form_field}\n                                    value={this.state.username}\n                                    onChange={(e) =>\n                                        this.updateUsername(e.target.value)\n                                    }\n                                    placeholder=\"Input the Venue of Event\"\n                                />\n                            </div>\n                            <div className={classes.form_group}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"Date and Time\"\n                                >\n                                    Date and Time\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.dateTimeValid}\n                                    message={this.state.errorMessage.date}\n                                />\n                                <DateTimePicker\n                                    onChange={(e)=>this.setState({dateTime:e})} \n                                    value={this.state.dateTime}\n                                />\n                            </div>\n                            {/* Description */}\n                            <div className={classes.form_group}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"Venue\"\n                                >\n                                    Event Description\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.descValid}\n                                    message={this.state.errorMessage.desc}\n                                />\n                                <input\n                                    type=\"text\"\n                                    id=\"desc\"\n                                    name=\"desc\"\n                                    className={classes.form_field}\n                                    value={this.state.desc}\n                                    onChange={(e) =>\n                                        this.updateDesc(e.target.value)\n                                    }\n                                    placeholder=\"Input the Venue of Event\"\n                                />\n                            </div>\n                            {/* Category */}\n                            <div className={classes.form_group}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"category\"\n                                >\n                                    Query Category\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.categoryValid}\n                                    message={this.state.errorMessage.category}\n                                />\n                                <select\n                                    name=\"category\"\n                                    id=\"category\"\n                                    className={classes.form_field}\n                                    value={this.state.category}\n                                    onChange={(e) =>\n                                        this.updateCategory(e.target.value)\n                                    }\n                                >\n                                    {this.getCategoryOptions()}\n                                </select>\n                                {/* <input\n                                    type=\"text\"\n                                    id=\"category\"\n                                    name=\"category\"\n                                    className={classes.form_field}\n                                    value={this.state.category}\n                                    onChange={(e) =>\n                                        this.updateCategory(e.target.value)\n                                    }\n                                    placeholder=\"Query Category\"\n                                /> */}\n                            </div>\n                            \n                            {/* Submit */}\n                            <div className=\"form-controls\">\n                                <button\n                                    className={classes.btn}\n                                    type=\"submit\"\n                                    disabled={!this.state.formValid}\n                                >\n                                    Ask Query\n                                </button>\n                            </div>\n                        </form>\n            </div>\n        );\n    };\n\n    \n}\n\nfunction ValidationMessage(props) {\n    if (!props.valid) {\n        return (\n            <div className={classes.error_msg}>\n                <p>{props.message}</p>\n            </div>\n        );\n    }\n    return null;\n}\n\n\n\nexport default AddEvent"]},"metadata":{},"sourceType":"module"}