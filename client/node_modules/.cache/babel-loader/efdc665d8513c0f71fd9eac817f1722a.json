{"ast":null,"code":"var _jsxFileName = \"/home/bhasker/Programming/Web Development/IIMS/client/src/components/AskQuery/AskQuery.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useState } from \"react\";\nimport classes from \"./AskQuery.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ValidationMessage(props) {\n  if (!props.valid) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.error_msg,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: props.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this);\n  }\n\n  return null;\n}\n\n_c = ValidationMessage;\n\nconst AskQuery = props => {\n  _s();\n\n  const kidlogo = process.env.PUBLIC_URL + \"/images/query.svg\";\n  const [username, setusername] = useState(\"\");\n  const [usernameValid, setUsernameValid] = useState(false);\n  const [category, setCategory] = useState(\"\");\n  const [categoryValid, setCategoryValid] = useState(false);\n  const [query, setQuery] = useState(\"\");\n  const [queryValid, setQueryValid] = useState(false);\n  const [formValid, setFormValid] = useState(false);\n  const [errorMessage, setErrorMessage] = useState({});\n\n  const validateForm = () => {\n    setFormValid(usernameValid && categoryValid && queryValid);\n  };\n\n  const updateUsername = data => {\n    let errorMsg = { ...errorMessage\n    };\n    setusername(data);\n\n    if (data.length > 0) {\n      setUsernameValid(true);\n    } else {\n      setUsernameValid(false);\n      errorMsg.username = \"Name is required!\";\n      setErrorMessage(errorMsg);\n    }\n\n    validateForm();\n  };\n\n  const updateCategory = data => {\n    let errorMsg = { ...errorMessage\n    };\n    setCategory(data);\n\n    if (data.length > 0) {\n      setCategoryValid(true);\n    } else {\n      setCategoryValid(false);\n      errorMsg.category = \"Category is required\";\n      setErrorMessage(errorMsg);\n    }\n\n    validateForm();\n  };\n\n  const updateQuery = data => {\n    let errorMsg = { ...errorMessage\n    };\n    setQuery(data);\n\n    if (data.length > 0) {\n      setQueryValid(true);\n    } else {\n      setQueryValid(false);\n      errorMsg.query = \"Query is required\";\n      setErrorMessage(errorMsg);\n    }\n\n    validateForm();\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const url = \"http://localhost:5000/testAPI\";\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: username,\n        category: category,\n        query: query\n      })\n    }).then(result => {\n      alert(JSON.stringify(result));\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.main,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.container,\n      style: {\n        backgroundImage: `url(${process.env.PUBLIC_URL + \"/images/CurveBackground.svg\"})`\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.item1,\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Ask Query\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Do you have any question regarding any Events or anything to ask from the Event Manager?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n          src: kidlogo,\n          alt: \"creative\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.item2,\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          action: \"#\",\n          id: \"js-form\",\n          className: classes.form,\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.form_group,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: classes.label,\n              htmlFor: \"username\",\n              children: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n              valid: usernameValid,\n              message: errorMessage.username\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"username\",\n              name: \"username\",\n              className: classes.form_field,\n              value: username,\n              onChange: e => updateUsername(e.target.value),\n              placeholder: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 127,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 119,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.form_group,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: classes.label,\n              htmlFor: \"category\",\n              children: \"Query Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n              valid: categoryValid,\n              message: errorMessage.category\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              id: \"category\",\n              name: \"category\",\n              className: classes.form_field,\n              value: category,\n              onChange: e => updateCategory(e.target.value),\n              placeholder: \"Query Category\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.form_group,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: classes.label,\n              htmlFor: \"query\",\n              children: \"Query\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n              valid: queryValid,\n              message: errorMessage.query\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n              type: \"text\",\n              id: \"query\",\n              name: \"query\",\n              className: classes.form_text_field,\n              value: query,\n              onChange: e => updateQuery(e.target.value),\n              rows: \"5\",\n              column: \"10\",\n              placeholder: \"Enter your query here\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 163,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-controls\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: classes.btn,\n              type: \"submit\",\n              disabled: !formValid,\n              children: \"Ask Query\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 176,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 175,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 9\n  }, this);\n};\n\n_s(AskQuery, \"Sb/BKqfWfBAmlmcGUznvLmR0WV0=\");\n\n_c2 = AskQuery;\n\nclass AskQuery2 extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      kidlogo: process.env.PUBLIC_URL + \"/images/query.svg\",\n      username: \"\",\n      usernameValid: false,\n      category: \"\",\n      categoryValid: false,\n      query: \"\",\n      queryValid: false,\n      formValid: false,\n      errorMessage: {\n        username: \"\",\n        category: \"\",\n        query: \"\"\n      }\n    };\n  }\n\n  validateForm() {\n    if (this.state.usernameValid === true && this.state.categoryValid === true && this.state.queryValid === true) {\n      this.setState({\n        formValid: true\n      });\n    }\n  }\n\n  updateUsername(data) {\n    let errorMsg = { ...this.state.errorMessage\n    };\n    this.setState({\n      username: data\n    });\n\n    if (data.length > 0) {\n      this.setState({\n        usernameValid: true\n      });\n      setUsernameValid(true);\n    } else {\n      setUsernameValid(false);\n      errorMsg.username = \"Name is required!\";\n      setErrorMessage(errorMsg);\n    }\n\n    validateForm();\n  }\n\n  updateCategory(data) {\n    let errorMsg = { ...errorMessage\n    };\n    setCategory(data);\n\n    if (data.length > 0) {\n      setCategoryValid(true);\n    } else {\n      setCategoryValid(false);\n      errorMsg.category = \"Category is required\";\n      setErrorMessage(errorMsg);\n    }\n\n    validateForm();\n  }\n\n  updateQuery(data) {\n    let errorMsg = { ...errorMessage\n    };\n    setQuery(data);\n\n    if (data.length > 0) {\n      setQueryValid(true);\n    } else {\n      setQueryValid(false);\n      errorMsg.query = \"Query is required\";\n      setErrorMessage(errorMsg);\n    }\n\n    validateForm();\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    const url = \"http://localhost:5000/testAPI\";\n    fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: username,\n        category: category,\n        query: query\n      })\n    }).then(result => {\n      alert(JSON.stringify(result));\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 16\n    }, this);\n  }\n\n}\n\nexport default AskQuery;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ValidationMessage\");\n$RefreshReg$(_c2, \"AskQuery\");","map":{"version":3,"sources":["/home/bhasker/Programming/Web Development/IIMS/client/src/components/AskQuery/AskQuery.js"],"names":["React","Component","useState","classes","ValidationMessage","props","valid","error_msg","message","AskQuery","kidlogo","process","env","PUBLIC_URL","username","setusername","usernameValid","setUsernameValid","category","setCategory","categoryValid","setCategoryValid","query","setQuery","queryValid","setQueryValid","formValid","setFormValid","errorMessage","setErrorMessage","validateForm","updateUsername","data","errorMsg","length","updateCategory","updateQuery","handleSubmit","e","preventDefault","url","fetch","method","headers","body","JSON","stringify","then","result","alert","main","container","backgroundImage","item1","item2","form","form_group","label","form_field","target","value","form_text_field","btn","AskQuery2","constructor","state","setState","render"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport classes from \"./AskQuery.module.css\";\n\nfunction ValidationMessage(props) {\n    if (!props.valid) {\n        return (\n            <div className={classes.error_msg}>\n                <p>{props.message}</p>\n            </div>\n        );\n    }\n    return null;\n}\n\nconst AskQuery = (props) => {\n    const kidlogo = process.env.PUBLIC_URL + \"/images/query.svg\";\n    const [username, setusername] = useState(\"\");\n    const [usernameValid, setUsernameValid] = useState(false);\n    const [category, setCategory] = useState(\"\");\n    const [categoryValid, setCategoryValid] = useState(false);\n    const [query, setQuery] = useState(\"\");\n    const [queryValid, setQueryValid] = useState(false);\n    const [formValid, setFormValid] = useState(false);\n    const [errorMessage, setErrorMessage] = useState({});\n\n    const validateForm = () => {\n        setFormValid(usernameValid && categoryValid && queryValid);\n    };\n    const updateUsername = (data) => {\n        let errorMsg = { ...errorMessage };\n        setusername(data);\n        if (data.length > 0) {\n            setUsernameValid(true);\n        } else {\n            setUsernameValid(false);\n            errorMsg.username = \"Name is required!\";\n            setErrorMessage(errorMsg);\n        }\n        validateForm();\n    };\n\n    const updateCategory = (data) => {\n        let errorMsg = { ...errorMessage };\n        setCategory(data);\n        if (data.length > 0) {\n            setCategoryValid(true);\n        } else {\n            setCategoryValid(false);\n            errorMsg.category = \"Category is required\";\n            setErrorMessage(errorMsg);\n        }\n        validateForm();\n    };\n\n    const updateQuery = (data) => {\n        let errorMsg = { ...errorMessage };\n        setQuery(data);\n        if (data.length > 0) {\n            setQueryValid(true);\n        } else {\n            setQueryValid(false);\n            errorMsg.query = \"Query is required\";\n            setErrorMessage(errorMsg);\n        }\n        validateForm();\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n\n        const url = \"http://localhost:5000/testAPI\";\n\n        fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                username: username,\n                category: category,\n                query: query,\n            }),\n        }).then((result) => {\n            alert(JSON.stringify(result));\n        });\n    };\n\n    return (\n        <div className={classes.main}>\n            <div\n                className={classes.container}\n                style={{\n                    backgroundImage: `url(${\n                        process.env.PUBLIC_URL + \"/images/CurveBackground.svg\"\n                    })`,\n                }}\n            >\n                <div className={classes.item1}>\n                    <h2>Ask Query</h2>\n                    <p>\n                        Do you have any question regarding any Events or\n                        anything to ask from the Event Manager?\n                    </p>\n                    <img src={kidlogo} alt=\"creative\"></img>\n                </div>\n                <div className={classes.item2}>\n                    <form\n                        action=\"#\"\n                        id=\"js-form\"\n                        className={classes.form}\n                        onSubmit={handleSubmit}\n                    >\n                        {/* <div className={classes.form_group}>\n                            <label className={classes.label} htmlFor=\"username\">\n                                Username\n                            </label>\n                            \n                        </div> */}\n                        <div className={classes.form_group}>\n                            <label className={classes.label} htmlFor=\"username\">\n                                Username\n                            </label>\n                            <ValidationMessage\n                                valid={usernameValid}\n                                message={errorMessage.username}\n                            />\n                            <input\n                                type=\"text\"\n                                id=\"username\"\n                                name=\"username\"\n                                className={classes.form_field}\n                                value={username}\n                                onChange={(e) => updateUsername(e.target.value)}\n                                placeholder=\"Username\"\n                            />\n                        </div>\n                        <div className={classes.form_group}>\n                            <label className={classes.label} htmlFor=\"category\">\n                                Query Category\n                            </label>\n                            <ValidationMessage\n                                valid={categoryValid}\n                                message={errorMessage.category}\n                            />\n                            <input\n                                type=\"text\"\n                                id=\"category\"\n                                name=\"category\"\n                                className={classes.form_field}\n                                value={category}\n                                onChange={(e) => updateCategory(e.target.value)}\n                                placeholder=\"Query Category\"\n                            />\n                        </div>\n                        <div className={classes.form_group}>\n                            <label className={classes.label} htmlFor=\"query\">\n                                Query\n                            </label>\n                            <ValidationMessage\n                                valid={queryValid}\n                                message={errorMessage.query}\n                            />\n                            <textarea\n                                type=\"text\"\n                                id=\"query\"\n                                name=\"query\"\n                                className={classes.form_text_field}\n                                value={query}\n                                onChange={(e) => updateQuery(e.target.value)}\n                                rows=\"5\"\n                                column=\"10\"\n                                placeholder=\"Enter your query here\"\n                            />\n                        </div>\n                        <div className=\"form-controls\">\n                            <button\n                                className={classes.btn}\n                                type=\"submit\"\n                                disabled={!formValid}\n                            >\n                                Ask Query\n                            </button>\n                        </div>\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nclass AskQuery2 extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kidlogo: process.env.PUBLIC_URL + \"/images/query.svg\",\n            username: \"\",\n            usernameValid: false,\n            category: \"\",\n            categoryValid: false,\n            query: \"\",\n            queryValid: false,\n            formValid: false,\n            errorMessage: {\n                username: \"\",\n                category: \"\",\n                query: \"\",\n            },\n        };\n    }\n\n    validateForm() {\n        if (\n            this.state.usernameValid === true &&\n            this.state.categoryValid === true &&\n            this.state.queryValid === true\n        ) {\n            this.setState({\n                formValid: true,\n            });\n        }\n    }\n    updateUsername(data) {\n        let errorMsg = { ...this.state.errorMessage };\n        this.setState({\n            username: data,\n        });\n        if (data.length > 0) {\n            this.setState({\n                usernameValid: true\n            })\n            setUsernameValid(true);\n        } else {\n            setUsernameValid(false);\n            errorMsg.username = \"Name is required!\";\n            setErrorMessage(errorMsg);\n        }\n        validateForm();\n    }\n\n    updateCategory(data) {\n        let errorMsg = { ...errorMessage };\n        setCategory(data);\n        if (data.length > 0) {\n            setCategoryValid(true);\n        } else {\n            setCategoryValid(false);\n            errorMsg.category = \"Category is required\";\n            setErrorMessage(errorMsg);\n        }\n        validateForm();\n    }\n\n    updateQuery(data) {\n        let errorMsg = { ...errorMessage };\n        setQuery(data);\n        if (data.length > 0) {\n            setQueryValid(true);\n        } else {\n            setQueryValid(false);\n            errorMsg.query = \"Query is required\";\n            setErrorMessage(errorMsg);\n        }\n        validateForm();\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n\n        const url = \"http://localhost:5000/testAPI\";\n\n        fetch(url, {\n            method: \"POST\",\n            headers: {\n                \"Content-type\": \"application/json\",\n            },\n            body: JSON.stringify({\n                username: username,\n                category: category,\n                query: query,\n            }),\n        }).then((result) => {\n            alert(JSON.stringify(result));\n        });\n    }\n\n    render() {\n        return <div></div>;\n    }\n}\nexport default AskQuery;\n"]},"metadata":{},"sourceType":"module"}