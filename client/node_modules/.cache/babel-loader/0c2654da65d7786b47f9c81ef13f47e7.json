{"ast":null,"code":"var _jsxFileName = \"/home/bhasker/Programming/Web Development/IIMS/src/providers/UserProvider.jsx\";\nimport React, { Component, createContext } from \"react\";\nimport { auth, fir } from \"../firebase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext({\n  user: null\n});\nexport const generateUserDocument = async (user, additionalData) => {\n  if (!user) return;\n  const userRef = firestore.doc(`users/${user.uid}`);\n  const snapshot = await userRef.get();\n\n  if (!snapshot.exists) {\n    const {\n      name,\n      email,\n      rollno\n    } = user;\n\n    try {\n      await userRef.set({\n        name,\n        email,\n        rollno,\n        ...additionalData\n      });\n    } catch (error) {\n      console.error(\"Error creating user document\", error);\n    }\n  }\n\n  return getUserDocument(user.uid);\n};\n\nconst getUserDocument = async uid => {\n  if (!uid) return null;\n\n  try {\n    const userDocument = await firestore.doc(`users/${uid}`).get();\n    return {\n      uid,\n      ...userDocument.data()\n    };\n  } catch (error) {\n    console.error(\"Error fetching user\", error);\n  }\n};\n\nclass UserProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: null\n    };\n\n    this.componentDidMount = () => {\n      auth.onAuthStateChanged(async userAuth => {\n        const user = await generateUserDocument(userAuth);\n        this.setState({\n          user\n        });\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: this.state.user,\n      children: this.props.children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default UserProvider;","map":{"version":3,"sources":["/home/bhasker/Programming/Web Development/IIMS/src/providers/UserProvider.jsx"],"names":["React","Component","createContext","auth","fir","UserContext","user","generateUserDocument","additionalData","userRef","firestore","doc","uid","snapshot","get","exists","name","email","rollno","set","error","console","getUserDocument","userDocument","data","UserProvider","state","componentDidMount","onAuthStateChanged","userAuth","setState","render","props","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD;AACA,SAASC,IAAT,EAAeC,GAAf,QAA0B,aAA1B;;AAEA,OAAO,MAAMC,WAAW,gBAAGH,aAAa,CAAC;AAAEI,EAAAA,IAAI,EAAE;AAAR,CAAD,CAAjC;AAEP,OAAO,MAAMC,oBAAoB,GAAG,OAAOD,IAAP,EAAaE,cAAb,KAAgC;AAChE,MAAI,CAACF,IAAL,EAAW;AACX,QAAMG,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQL,IAAI,CAACM,GAAI,EAAhC,CAAhB;AACA,QAAMC,QAAQ,GAAG,MAAMJ,OAAO,CAACK,GAAR,EAAvB;;AACA,MAAI,CAACD,QAAQ,CAACE,MAAd,EAAsB;AAClB,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,QAA0BZ,IAAhC;;AACA,QAAI;AACA,YAAMG,OAAO,CAACU,GAAR,CAAY;AACdH,QAAAA,IADc;AAEdC,QAAAA,KAFc;AAGdC,QAAAA,MAHc;AAId,WAAGV;AAJW,OAAZ,CAAN;AAMH,KAPD,CAOE,OAAOY,KAAP,EAAc;AACZC,MAAAA,OAAO,CAACD,KAAR,CAAc,8BAAd,EAA8CA,KAA9C;AACH;AACJ;;AACD,SAAOE,eAAe,CAAChB,IAAI,CAACM,GAAN,CAAtB;AACH,CAlBM;;AAmBP,MAAMU,eAAe,GAAG,MAAOV,GAAP,IAAe;AACnC,MAAI,CAACA,GAAL,EAAU,OAAO,IAAP;;AACV,MAAI;AACA,UAAMW,YAAY,GAAG,MAAMb,SAAS,CAACC,GAAV,CAAe,SAAQC,GAAI,EAA3B,EAA8BE,GAA9B,EAA3B;AACA,WAAO;AACHF,MAAAA,GADG;AAEH,SAAGW,YAAY,CAACC,IAAb;AAFA,KAAP;AAIH,GAND,CAME,OAAOJ,KAAP,EAAc;AACZC,IAAAA,OAAO,CAACD,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACH;AACJ,CAXD;;AAaA,MAAMK,YAAN,SAA2BxB,SAA3B,CAAqC;AAAA;AAAA;AAAA,SACjCyB,KADiC,GACzB;AACJpB,MAAAA,IAAI,EAAE;AADF,KADyB;;AAAA,SAKjCqB,iBALiC,GAKb,MAAM;AACtBxB,MAAAA,IAAI,CAACyB,kBAAL,CAAwB,MAAOC,QAAP,IAAoB;AACxC,cAAMvB,IAAI,GAAG,MAAMC,oBAAoB,CAACsB,QAAD,CAAvC;AACA,aAAKC,QAAL,CAAc;AAAExB,UAAAA;AAAF,SAAd;AACH,OAHD;AAIH,KAVgC;AAAA;;AAWjCyB,EAAAA,MAAM,GAAG;AACL,wBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,MAAA,KAAK,EAAE,KAAKL,KAAL,CAAWpB,IAAxC;AAAA,gBACK,KAAK0B,KAAL,CAAWC;AADhB;AAAA;AAAA;AAAA;AAAA,YADJ;AAKH;;AAjBgC;;AAmBrC,eAAeR,YAAf","sourcesContent":["import React, { Component, createContext } from \"react\";\nimport { auth, fir } from \"../firebase\";\n\nexport const UserContext = createContext({ user: null });\n\nexport const generateUserDocument = async (user, additionalData) => {\n    if (!user) return;\n    const userRef = firestore.doc(`users/${user.uid}`);\n    const snapshot = await userRef.get();\n    if (!snapshot.exists) {\n        const { name, email, rollno } = user;\n        try {\n            await userRef.set({\n                name,\n                email,\n                rollno,\n                ...additionalData,\n            });\n        } catch (error) {\n            console.error(\"Error creating user document\", error);\n        }\n    }\n    return getUserDocument(user.uid);\n};\nconst getUserDocument = async (uid) => {\n    if (!uid) return null;\n    try {\n        const userDocument = await firestore.doc(`users/${uid}`).get();\n        return {\n            uid,\n            ...userDocument.data(),\n        };\n    } catch (error) {\n        console.error(\"Error fetching user\", error);\n    }\n};\n\nclass UserProvider extends Component {\n    state = {\n        user: null,\n    };\n\n    componentDidMount = () => {\n        auth.onAuthStateChanged(async (userAuth) => {\n            const user = await generateUserDocument(userAuth);\n            this.setState({ user });\n        });\n    };\n    render() {\n        return (\n            <UserContext.Provider value={this.state.user}>\n                {this.props.children}\n            </UserContext.Provider>\n        );\n    }\n}\nexport default UserProvider;\n"]},"metadata":{},"sourceType":"module"}