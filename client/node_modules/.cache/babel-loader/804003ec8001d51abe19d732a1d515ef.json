{"ast":null,"code":"var _jsxFileName = \"/home/mohan/dev/react/iims/client/src/components/AddEvent/AddEvent.js\";\nimport React, { Component } from 'react';\nimport classes from './AddEvent.module.css';\nimport DateTimePicker from 'react-datetime-picker';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AddEvent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      kidlogo: process.env.PUBLIC_URL + \"/images/query.svg\",\n      username: \"\",\n      usernameValid: false,\n      venue: \"\",\n      venueValid: false,\n      dateTime: new Date(),\n      categories: [\"Category 1\", \"Category 2\", \"Category 3\", \"Category 4\", \"Category 5\", \"Category 6\"],\n      category: \"Category 1\",\n      categoryValid: true,\n      query: \"\",\n      queryValid: false,\n      formValid: false,\n      submitted: false,\n      errorMessage: {\n        username: \"\",\n        category: \"\",\n        query: \"\",\n        form: \"\",\n        venue: \"\",\n        date: \"\"\n      }\n    };\n  }\n\n  async validateForm() {\n    if (this.state.usernameValid === true && this.state.categoryValid === true && this.state.queryValid === true) {\n      await this.setState({\n        formValid: true\n      });\n    } else {\n      let errMsg = { ...this.state.errorMessage\n      };\n      errMsg.form = \"Form is invalid\";\n      await this.setState({\n        formValid: false,\n        errorMessage: errMsg\n      });\n    }\n  }\n\n  async updateUsername(data) {\n    let errorMsg = { ...this.state.errorMessage\n    };\n\n    if (data.length > 0) {\n      await this.setState({\n        username: data,\n        usernameValid: true\n      });\n    } else {\n      errorMsg.username = \"Name is required!\";\n      await this.setState({\n        username: data,\n        usernameValid: false,\n        errorMessage: errorMsg\n      });\n    }\n\n    await this.validateForm();\n  }\n\n  async updateVenue(data) {\n    let errorMsg = { ...this.state.errorMessage\n    };\n\n    if (data.length > 0) {\n      await this.setState({\n        venue: data,\n        venueValid: true\n      });\n    } else {\n      errorMsg.venue = \"Name is required!\";\n      await this.setState({\n        venue: data,\n        venueValid: false,\n        errorMessage: errorMsg\n      });\n    }\n\n    await this.validateForm();\n  }\n\n  getCategoryOptions() {\n    let options = [];\n    this.state.categories.forEach(category => {\n      options.push( /*#__PURE__*/_jsxDEV(\"option\", {\n        value: category,\n        children: category\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 26\n      }, this));\n    });\n    return options;\n  }\n\n  async updateCategory(data) {\n    let errorMsg = { ...this.state.errorMessage\n    };\n    console.log(data);\n\n    if (data.length > 0 && this.state.categories.includes(data) === true) {\n      await this.setState({\n        category: data,\n        categoryValid: true\n      });\n    } else {\n      errorMsg.category = \"Category is required!\";\n      await this.setState({\n        category: data,\n        categoryValid: false,\n        errorMessage: errorMsg\n      });\n    }\n\n    await this.validateForm();\n  }\n\n  async updateQuery(data) {\n    let errorMsg = { ...this.state.errorMessage\n    };\n\n    if (data.length > 0) {\n      await this.setState({\n        query: data,\n        queryValid: true\n      });\n    } else {\n      errorMsg.query = \"Query is required!\";\n      await this.setState({\n        query: data,\n        queryValid: false,\n        errorMessage: errorMsg\n      });\n    }\n\n    this.validateForm();\n  }\n\n  async handleSubmit(e) {\n    e.preventDefault();\n    await this.validateForm();\n\n    if (this.state.formValid === true && this.state.submitted === false) {\n      this.setState({\n        submitted: true\n      });\n      const url = process.env.REACT_APP_API_ENDPOINT + \"query/\";\n      fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: this.state.username,\n          category: this.state.category,\n          query: this.state.query\n        })\n      }).then(async () => {\n        await this.setState({\n          username: \"\",\n          usernameValid: false,\n          category: \"\",\n          categoryValid: true,\n          query: \"\",\n          queryValid: false,\n          formValid: false,\n          submitted: false,\n          errorMessage: {\n            username: \"\",\n            category: \"\",\n            query: \"\",\n            form: \"\"\n          }\n        });\n      });\n    } else {\n      let errMsg = { ...this.state.errorMessage\n      };\n      errMsg.form = \"Form is invalid\";\n      await this.setState({\n        errorMessage: errMsg\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.container,\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: classes.title,\n        children: \"Add Events\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        action: \"#\",\n        id: \"js-form\",\n        className: classes.form,\n        onSubmit: this.handleSubmit.bind(this),\n        children: [/*#__PURE__*/_jsxDEV(ValidationMessage, {\n          valid: this.state.formValid,\n          message: this.state.errorMessage.form\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.form_group,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: classes.label,\n            htmlFor: \"Name\",\n            children: \"Name Of Event\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 202,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n            valid: this.state.usernameValid,\n            message: this.state.errorMessage.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"username\",\n            name: \"username\",\n            className: classes.form_field,\n            value: this.state.username,\n            onChange: e => this.updateUsername(e.target.value),\n            placeholder: \"Input the Event Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 201,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.form_group,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: classes.label,\n            htmlFor: \"Venue\",\n            children: \"Venue Of Event\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 225,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n            valid: this.state.venueValid,\n            message: this.state.errorMessage.venue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"venue\",\n            name: \"venue\",\n            className: classes.form_field,\n            value: this.state.username,\n            onChange: e => this.updateUsername(e.target.value),\n            placeholder: \"Input the Venue of Event\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 235,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.form_group,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: classes.label,\n            htmlFor: \"Date and Time\",\n            children: \"Date and Time\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n            valid: this.state.dateTimeValid,\n            message: this.state.errorMessage.date\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 254,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(DateTimePicker, {\n            onChange: e => this.setState({\n              dateTime: e\n            }),\n            value: this.state.dateTime\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 258,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.form_group,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: classes.label,\n            htmlFor: \"Venue\",\n            children: \"Event Description\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n            valid: this.state.venueValid,\n            message: this.state.errorMessage.venue\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            id: \"venue\",\n            name: \"venue\",\n            className: classes.form_field,\n            value: this.state.username,\n            onChange: e => this.updateUsername(e.target.value),\n            placeholder: \"Input the Venue of Event\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 264,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.form_group,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: classes.label,\n            htmlFor: \"category\",\n            children: \"Query Category\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n            valid: this.state.categoryValid,\n            message: this.state.errorMessage.category\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            name: \"category\",\n            id: \"category\",\n            className: classes.form_field,\n            value: this.state.category,\n            onChange: e => this.updateCategory(e.target.value),\n            children: this.getCategoryOptions()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 299,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.form_group,\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: classes.label,\n            htmlFor: \"query\",\n            children: \"Query\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 324,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n            valid: this.state.queryValid,\n            message: this.state.errorMessage.query\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 330,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n            type: \"text\",\n            id: \"query\",\n            name: \"query\",\n            className: classes.form_text_field,\n            value: this.state.query,\n            onChange: e => this.updateQuery(e.target.value),\n            column: \"5\",\n            placeholder: \"Enter your query here\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 334,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 323,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-controls\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: classes.btn,\n            type: \"submit\",\n            disabled: !this.state.formValid,\n            children: \"Ask Query\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 349,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 29\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nfunction ValidationMessage(props) {\n  if (!props.valid) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.error_msg,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: props.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 13\n    }, this);\n  }\n\n  return null;\n}\n\n_c = ValidationMessage;\nexport default AddEvent;\n\nvar _c;\n\n$RefreshReg$(_c, \"ValidationMessage\");","map":{"version":3,"sources":["/home/mohan/dev/react/iims/client/src/components/AddEvent/AddEvent.js"],"names":["React","Component","classes","DateTimePicker","AddEvent","constructor","props","state","kidlogo","process","env","PUBLIC_URL","username","usernameValid","venue","venueValid","dateTime","Date","categories","category","categoryValid","query","queryValid","formValid","submitted","errorMessage","form","date","validateForm","setState","errMsg","updateUsername","data","errorMsg","length","updateVenue","getCategoryOptions","options","forEach","push","updateCategory","console","log","includes","updateQuery","handleSubmit","e","preventDefault","url","REACT_APP_API_ENDPOINT","fetch","method","headers","body","JSON","stringify","then","render","container","title","bind","form_group","label","form_field","target","value","dateTimeValid","form_text_field","btn","ValidationMessage","valid","error_msg","message"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport classes from './AddEvent.module.css';\nimport DateTimePicker from 'react-datetime-picker';\n\n\nclass AddEvent extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kidlogo: process.env.PUBLIC_URL + \"/images/query.svg\",\n            username: \"\",\n            usernameValid: false,\n            venue : \"\",\n            venueValid:false,\n            dateTime: new Date(),\n            \n            categories: [\n                \"Category 1\",\n                \"Category 2\",\n                \"Category 3\",\n                \"Category 4\",\n                \"Category 5\",\n                \"Category 6\",\n            ],\n            category: \"Category 1\",\n            categoryValid: true,\n            query: \"\",\n            queryValid: false,\n            formValid: false,\n            submitted: false,\n            errorMessage: {\n                username: \"\",\n                category: \"\",\n                query: \"\",\n                form: \"\",\n                venue: \"\",\n                date: \"\",\n            },\n        };\n    }\n    async validateForm() {\n        if (\n            this.state.usernameValid === true &&\n            this.state.categoryValid === true &&\n            this.state.queryValid === true\n        ) {\n            await this.setState({\n                formValid: true,\n            });\n        } else {\n            let errMsg = { ...this.state.errorMessage };\n            errMsg.form = \"Form is invalid\";\n            await this.setState({\n                formValid: false,\n                errorMessage: errMsg,\n            });\n        }\n    }\n    async updateUsername(data) {\n        let errorMsg = { ...this.state.errorMessage };\n        if (data.length > 0) {\n            await this.setState({\n                username: data,\n                usernameValid: true,\n            });\n        } else {\n            errorMsg.username = \"Name is required!\";\n            await this.setState({\n                username: data,\n                usernameValid: false,\n                errorMessage: errorMsg,\n            });\n        }\n        await this.validateForm();\n    }\n    async updateVenue(data) {\n        let errorMsg = { ...this.state.errorMessage };\n        if (data.length > 0) {\n            await this.setState({\n                venue: data,\n                venueValid: true,\n            });\n        } else {\n            errorMsg.venue = \"Name is required!\";\n            await this.setState({\n                venue: data,\n                venueValid: false,\n                errorMessage: errorMsg,\n            });\n        }\n        await this.validateForm();\n    }\n\n    getCategoryOptions() {\n        let options = [];\n        this.state.categories.forEach((category) => {\n            options.push(<option value={category}>{category}</option>);\n        });\n        return options;\n    }\n\n    async updateCategory(data) {\n        let errorMsg = { ...this.state.errorMessage };\n        console.log(data);\n        if (data.length > 0 && this.state.categories.includes(data) === true) {\n            await this.setState({\n                category: data,\n                categoryValid: true,\n            });\n        } else {\n            errorMsg.category = \"Category is required!\";\n            await this.setState({\n                category: data,\n                categoryValid: false,\n                errorMessage: errorMsg,\n            });\n        }\n        await this.validateForm();\n    }\n\n    async updateQuery(data) {\n        let errorMsg = { ...this.state.errorMessage };\n        if (data.length > 0) {\n            await this.setState({\n                query: data,\n                queryValid: true,\n            });\n        } else {\n            errorMsg.query = \"Query is required!\";\n            await this.setState({\n                query: data,\n                queryValid: false,\n                errorMessage: errorMsg,\n            });\n        }\n        this.validateForm();\n    }\n\n    async handleSubmit(e) {\n        e.preventDefault();\n        await this.validateForm();\n        if (this.state.formValid === true && this.state.submitted === false) {\n            this.setState({\n                submitted: true,\n            });\n\n            const url = process.env.REACT_APP_API_ENDPOINT + \"query/\";\n\n            fetch(url, {\n                method: \"POST\",\n                headers: {\n                    \"Content-type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    username: this.state.username,\n                    category: this.state.category,\n                    query: this.state.query,\n                }),\n            }).then(async () => {\n                await this.setState({\n                    username: \"\",\n                    usernameValid: false,\n                    category: \"\",\n                    categoryValid: true,\n                    query: \"\",\n                    queryValid: false,\n                    formValid: false,\n                    submitted: false,\n                    errorMessage: {\n                        username: \"\",\n                        category: \"\",\n                        query: \"\",\n                        form: \"\",\n                    },\n                });\n            });\n        } else {\n            let errMsg = { ...this.state.errorMessage };\n            errMsg.form = \"Form is invalid\";\n            await this.setState({\n                errorMessage: errMsg,\n            });\n        }\n    }\n    render(){\n        return (\n            <div className={classes.container}>\n                <h1 className={classes.title}>Add Events</h1>\n                <form\n                            action=\"#\"\n                            id=\"js-form\"\n                            className={classes.form}\n                            onSubmit={this.handleSubmit.bind(this)}\n                        >\n                            <ValidationMessage\n                                valid={this.state.formValid}\n                                message={this.state.errorMessage.form}\n                            />\n                            {/* name */}\n                            <div className={classes.form_group}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"Name\"\n                                >\n                                    Name Of Event\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.usernameValid}\n                                    message={this.state.errorMessage.username}\n                                />\n                                <input\n                                    type=\"text\"\n                                    id=\"username\"\n                                    name=\"username\"\n                                    className={classes.form_field}\n                                    value={this.state.username}\n                                    onChange={(e) =>\n                                        this.updateUsername(e.target.value)\n                                    }\n                                    placeholder=\"Input the Event Name\"\n                                />\n                            </div>\n                            <div className={classes.form_group}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"Venue\"\n                                >\n                                    Venue Of Event\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.venueValid}\n                                    message={this.state.errorMessage.venue}\n                                />\n                                <input\n                                    type=\"text\"\n                                    id=\"venue\"\n                                    name=\"venue\"\n                                    className={classes.form_field}\n                                    value={this.state.username}\n                                    onChange={(e) =>\n                                        this.updateUsername(e.target.value)\n                                    }\n                                    placeholder=\"Input the Venue of Event\"\n                                />\n                            </div>\n                            <div className={classes.form_group}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"Date and Time\"\n                                >\n                                    Date and Time\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.dateTimeValid}\n                                    message={this.state.errorMessage.date}\n                                />\n                                <DateTimePicker\n                                    onChange={(e)=>this.setState({dateTime:e})} \n                                    value={this.state.dateTime}\n                                />\n                            </div>\n                            {/* Description */}\n                            <div className={classes.form_group}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"Venue\"\n                                >\n                                    Event Description\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.venueValid}\n                                    message={this.state.errorMessage.venue}\n                                />\n                                <input\n                                    type=\"text\"\n                                    id=\"venue\"\n                                    name=\"venue\"\n                                    className={classes.form_field}\n                                    value={this.state.username}\n                                    onChange={(e) =>\n                                        this.updateUsername(e.target.value)\n                                    }\n                                    placeholder=\"Input the Venue of Event\"\n                                />\n                            </div>\n                            {/* Category */}\n                            <div className={classes.form_group}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"category\"\n                                >\n                                    Query Category\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.categoryValid}\n                                    message={this.state.errorMessage.category}\n                                />\n                                <select\n                                    name=\"category\"\n                                    id=\"category\"\n                                    className={classes.form_field}\n                                    value={this.state.category}\n                                    onChange={(e) =>\n                                        this.updateCategory(e.target.value)\n                                    }\n                                >\n                                    {this.getCategoryOptions()}\n                                </select>\n                                {/* <input\n                                    type=\"text\"\n                                    id=\"category\"\n                                    name=\"category\"\n                                    className={classes.form_field}\n                                    value={this.state.category}\n                                    onChange={(e) =>\n                                        this.updateCategory(e.target.value)\n                                    }\n                                    placeholder=\"Query Category\"\n                                /> */}\n                            </div>\n                            {/* Query */}\n                            <div className={classes.form_group}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"query\"\n                                >\n                                    Query\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.queryValid}\n                                    message={this.state.errorMessage.query}\n                                />\n                                <textarea\n                                    type=\"text\"\n                                    id=\"query\"\n                                    name=\"query\"\n                                    className={classes.form_text_field}\n                                    value={this.state.query}\n                                    onChange={(e) =>\n                                        this.updateQuery(e.target.value)\n                                    }\n                                    column=\"5\"\n                                    placeholder=\"Enter your query here\"\n                                />\n                            </div>\n                            {/* Submit */}\n                            <div className=\"form-controls\">\n                                <button\n                                    className={classes.btn}\n                                    type=\"submit\"\n                                    disabled={!this.state.formValid}\n                                >\n                                    Ask Query\n                                </button>\n                            </div>\n                        </form>\n            </div>\n        );\n    };\n\n    \n}\n\nfunction ValidationMessage(props) {\n    if (!props.valid) {\n        return (\n            <div className={classes.error_msg}>\n                <p>{props.message}</p>\n            </div>\n        );\n    }\n    return null;\n}\n\n\n\nexport default AddEvent"]},"metadata":{},"sourceType":"module"}