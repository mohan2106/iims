{"ast":null,"code":"var _jsxFileName = \"/home/bhasker/Programming/Web Development/IIMS/client/src/components/AskQuery/AskQuery.js\";\nimport React, { Component, useState } from \"react\";\nimport classes from \"./AskQuery.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ValidationMessage(props) {\n  if (!props.valid) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.error_msg,\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: props.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 13\n    }, this);\n  }\n\n  return null;\n}\n\n_c = ValidationMessage;\n\nclass AskQuery extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      kidlogo: process.env.PUBLIC_URL + \"/images/query.svg\",\n      username: \"\",\n      usernameValid: false,\n      category: \"\",\n      categoryValid: false,\n      query: \"\",\n      queryValid: false,\n      formValid: false,\n      submitted: false,\n      errorMessage: {\n        username: \"\",\n        category: \"\",\n        query: \"\",\n        form: \"\"\n      }\n    };\n  }\n\n  async validateForm() {\n    if (this.state.usernameValid === true && this.state.categoryValid === true && this.state.queryValid === true) {\n      await this.setState({\n        formValid: true\n      });\n    } else {\n      var errMsg = { ...this.state.errorMessage\n      };\n      errMsg.form = \"Form is invalid\";\n      await this.setState({\n        formValid: false,\n        errorMessage: errMsg\n      });\n    }\n  }\n\n  updateUsername(data) {\n    var errorMsg = { ...this.state.errorMessage\n    };\n    this.setState({\n      username: data\n    });\n\n    if (data.length > 0) {\n      this.setState({\n        usernameValid: true\n      });\n    } else {\n      errorMsg.username = \"Name is required!\";\n      this.setState({\n        usernameValid: false,\n        errorMessage: errorMsg\n      });\n    }\n\n    this.validateForm();\n  }\n\n  updateCategory(data) {\n    var errorMsg = { ...this.state.errorMessage\n    };\n    this.setState({\n      category: data\n    });\n\n    if (data.length > 0) {\n      this.setState({\n        categoryValid: true\n      });\n    } else {\n      console.log(data);\n      console.log(data.length);\n      errorMsg.category = \"Category is required!\";\n      this.setState({\n        categoryValid: false,\n        errorMessage: errorMsg\n      });\n    }\n\n    console.log(this.state);\n    this.validateForm();\n    console.log(this.state);\n  }\n\n  updateQuery(data) {\n    var errorMsg = { ...this.state.errorMessage\n    };\n    this.setState({\n      query: data\n    });\n\n    if (data.length > 0) {\n      this.setState({\n        queryValid: true\n      });\n    } else {\n      errorMsg.query = \"Query is required!\";\n      this.setState({\n        queryValid: false,\n        errorMessage: errorMsg\n      });\n    }\n\n    this.validateForm();\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    this.validateForm();\n\n    if (this.state.formValid === true && this.state.submitted === false) {\n      this.setState({\n        submitted: true\n      });\n      const url = process.env.REACT_APP_API_ENDPOINT + \"query/post\";\n      fetch(url, {\n        method: \"POST\",\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          username: this.state.username,\n          category: this.state.category,\n          query: this.state.query\n        })\n      }).then(() => {\n        this.setState({\n          username: \"\",\n          usernameValid: false,\n          category: \"\",\n          categoryValid: false,\n          query: \"\",\n          queryValid: false,\n          formValid: false,\n          submitted: false,\n          errorMessage: {\n            username: \"\",\n            category: \"\",\n            query: \"\",\n            form: \"\"\n          }\n        });\n      });\n    } else {\n      let errMsg = { ...this.state.errorMessage\n      };\n      errMsg.form = \"Form is invalid\";\n      this.setState({\n        formValid: false,\n        errorMessage: errMsg\n      });\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.main,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.container,\n        style: {\n          backgroundImage: `url(${process.env.PUBLIC_URL + \"/images/CurveBackground.svg\"})`\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.item1,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Ask Query\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Do you have any question regarding any Events or anything to ask from the Event Manager?\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n            src: this.state.kidlogo,\n            alt: \"creative\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.item2,\n          children: /*#__PURE__*/_jsxDEV(\"form\", {\n            action: \"#\",\n            id: \"js-form\",\n            className: classes.form,\n            onSubmit: this.handleSubmit.bind(this),\n            children: [/*#__PURE__*/_jsxDEV(ValidationMessage, {\n              valid: this.state.formValid,\n              message: this.state.errorMessage.form\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.form_group,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: classes.label,\n                htmlFor: \"username\",\n                children: \"Username\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 197,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n                valid: this.state.usernameValid,\n                message: this.state.errorMessage.username\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"username\",\n                name: \"username\",\n                className: classes.form_field,\n                value: this.state.username,\n                onChange: e => this.updateUsername(e.target.value),\n                placeholder: \"Username\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 207,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.form_group,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: classes.label,\n                htmlFor: \"category\",\n                children: \"Query Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n                valid: this.state.categoryValid,\n                message: this.state.errorMessage.category\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 226,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"category\",\n                name: \"category\",\n                className: classes.form_field,\n                value: this.state.category,\n                onChange: e => this.updateCategory(e.target.value),\n                placeholder: \"Query Category\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.form_group,\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                className: classes.label,\n                htmlFor: \"query\",\n                children: \"Query\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(ValidationMessage, {\n                valid: this.state.queryValid,\n                message: this.state.errorMessage.query\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 249,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                type: \"text\",\n                id: \"query\",\n                name: \"query\",\n                className: classes.form_text_field,\n                value: this.state.query,\n                onChange: e => this.updateQuery(e.target.value),\n                rows: \"5\",\n                column: \"10\",\n                placeholder: \"Enter your query here\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 242,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-controls\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                className: classes.btn,\n                type: \"submit\",\n                disabled: !this.state.formValid,\n                children: \"Ask Query\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 267,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default AskQuery;\n\nvar _c;\n\n$RefreshReg$(_c, \"ValidationMessage\");","map":{"version":3,"sources":["/home/bhasker/Programming/Web Development/IIMS/client/src/components/AskQuery/AskQuery.js"],"names":["React","Component","useState","classes","ValidationMessage","props","valid","error_msg","message","AskQuery","constructor","state","kidlogo","process","env","PUBLIC_URL","username","usernameValid","category","categoryValid","query","queryValid","formValid","submitted","errorMessage","form","validateForm","setState","errMsg","updateUsername","data","errorMsg","length","updateCategory","console","log","updateQuery","handleSubmit","e","preventDefault","url","REACT_APP_API_ENDPOINT","fetch","method","headers","body","JSON","stringify","then","render","main","container","backgroundImage","item1","item2","bind","form_group","label","form_field","target","value","form_text_field","btn"],"mappings":"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","sourcesContent":["import React, { Component, useState } from \"react\";\nimport classes from \"./AskQuery.module.css\";\n\nfunction ValidationMessage(props) {\n    if (!props.valid) {\n        return (\n            <div className={classes.error_msg}>\n                <p>{props.message}</p>\n            </div>\n        );\n    }\n    return null;\n}\n\nclass AskQuery extends Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            kidlogo: process.env.PUBLIC_URL + \"/images/query.svg\",\n            username: \"\",\n            usernameValid: false,\n            category: \"\",\n            categoryValid: false,\n            query: \"\",\n            queryValid: false,\n            formValid: false,\n            submitted: false,\n            errorMessage: {\n                username: \"\",\n                category: \"\",\n                query: \"\",\n                form: \"\",\n            },\n        };\n    }\n\n    async validateForm() {\n        if (\n            this.state.usernameValid === true &&\n            this.state.categoryValid === true &&\n            this.state.queryValid === true\n        ) {\n            await this.setState({\n                formValid: true,\n            });\n        } else {\n            var errMsg = { ...this.state.errorMessage };\n            errMsg.form = \"Form is invalid\";\n            await this.setState({\n                formValid: false,\n                errorMessage: errMsg,\n            });\n        }\n    }\n    updateUsername(data) {\n        var errorMsg = { ...this.state.errorMessage };\n        this.setState({\n            username: data,\n        });\n        if (data.length > 0) {\n            this.setState({\n                usernameValid: true,\n            });\n        } else {\n            errorMsg.username = \"Name is required!\";\n            this.setState({\n                usernameValid: false,\n                errorMessage: errorMsg,\n            });\n        }\n        this.validateForm();\n    }\n\n    updateCategory(data) {\n        var errorMsg = { ...this.state.errorMessage };\n        this.setState({\n            category: data,\n        });\n        if (data.length > 0) {\n            this.setState({\n                categoryValid: true,\n            });\n        } else {\n            console.log(data);\n            console.log(data.length);\n            errorMsg.category = \"Category is required!\";\n            this.setState({\n                categoryValid: false,\n                errorMessage: errorMsg,\n            });\n        }\n        console.log(this.state);\n        this.validateForm();\n        console.log(this.state);\n    }\n\n    updateQuery(data) {\n        var errorMsg = { ...this.state.errorMessage };\n        this.setState({\n            query: data,\n        });\n        if (data.length > 0) {\n            this.setState({\n                queryValid: true,\n            });\n        } else {\n            errorMsg.query = \"Query is required!\";\n            this.setState({\n                queryValid: false,\n                errorMessage: errorMsg,\n            });\n        }\n        this.validateForm();\n    }\n\n    handleSubmit(e) {\n        e.preventDefault();\n        this.validateForm();\n        if (this.state.formValid === true && this.state.submitted === false) {\n            this.setState({\n                submitted: true,\n            });\n\n            const url = process.env.REACT_APP_API_ENDPOINT + \"query/post\";\n\n            fetch(url, {\n                method: \"POST\",\n                headers: {\n                    \"Content-type\": \"application/json\",\n                },\n                body: JSON.stringify({\n                    username: this.state.username,\n                    category: this.state.category,\n                    query: this.state.query,\n                }),\n            }).then(() => {\n                this.setState({\n                    username: \"\",\n                    usernameValid: false,\n                    category: \"\",\n                    categoryValid: false,\n                    query: \"\",\n                    queryValid: false,\n                    formValid: false,\n                    submitted: false,\n                    errorMessage: {\n                        username: \"\",\n                        category: \"\",\n                        query: \"\",\n                        form: \"\",\n                    },\n                });\n            });\n        } else {\n            let errMsg = { ...this.state.errorMessage };\n            errMsg.form = \"Form is invalid\";\n            this.setState({\n                formValid: false,\n                errorMessage: errMsg,\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className={classes.main}>\n                <div\n                    className={classes.container}\n                    style={{\n                        backgroundImage: `url(${\n                            process.env.PUBLIC_URL +\n                            \"/images/CurveBackground.svg\"\n                        })`,\n                    }}\n                >\n                    <div className={classes.item1}>\n                        <h2>Ask Query</h2>\n                        <p>\n                            Do you have any question regarding any Events or\n                            anything to ask from the Event Manager?\n                        </p>\n                        <img src={this.state.kidlogo} alt=\"creative\"></img>\n                    </div>\n                    <div className={classes.item2}>\n                        <form\n                            action=\"#\"\n                            id=\"js-form\"\n                            className={classes.form}\n                            onSubmit={this.handleSubmit.bind(this)}\n                        >\n                            <ValidationMessage\n                                valid={this.state.formValid}\n                                message={this.state.errorMessage.form}\n                            />\n                            <div className={classes.form_group}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"username\"\n                                >\n                                    Username\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.usernameValid}\n                                    message={this.state.errorMessage.username}\n                                />\n                                <input\n                                    type=\"text\"\n                                    id=\"username\"\n                                    name=\"username\"\n                                    className={classes.form_field}\n                                    value={this.state.username}\n                                    onChange={(e) =>\n                                        this.updateUsername(e.target.value)\n                                    }\n                                    placeholder=\"Username\"\n                                />\n                            </div>\n                            <div className={classes.form_group}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"category\"\n                                >\n                                    Query Category\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.categoryValid}\n                                    message={this.state.errorMessage.category}\n                                />\n                                <input\n                                    type=\"text\"\n                                    id=\"category\"\n                                    name=\"category\"\n                                    className={classes.form_field}\n                                    value={this.state.category}\n                                    onChange={(e) =>\n                                        this.updateCategory(e.target.value)\n                                    }\n                                    placeholder=\"Query Category\"\n                                />\n                            </div>\n                            <div className={classes.form_group}>\n                                <label\n                                    className={classes.label}\n                                    htmlFor=\"query\"\n                                >\n                                    Query\n                                </label>\n                                <ValidationMessage\n                                    valid={this.state.queryValid}\n                                    message={this.state.errorMessage.query}\n                                />\n                                <textarea\n                                    type=\"text\"\n                                    id=\"query\"\n                                    name=\"query\"\n                                    className={classes.form_text_field}\n                                    value={this.state.query}\n                                    onChange={(e) =>\n                                        this.updateQuery(e.target.value)\n                                    }\n                                    rows=\"5\"\n                                    column=\"10\"\n                                    placeholder=\"Enter your query here\"\n                                />\n                            </div>\n                            <div className=\"form-controls\">\n                                <button\n                                    className={classes.btn}\n                                    type=\"submit\"\n                                    disabled={!this.state.formValid}\n                                >\n                                    Ask Query\n                                </button>\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\nexport default AskQuery;\n"]},"metadata":{},"sourceType":"module"}